-- Create a connection object to use in the BigQuery external table creation - Follow this article: 
-- https://cloud.google.com/bigquery/docs/create-cloud-resource-connection#create-cloud-resource-connection

-- Creates an external table (Biglake table) ): This code creates a BigLake external table named <TableName> in the <ProjectID>.<DatasetName>. External tables allow BigQuery to query data stored outside of BigQuery storage.
-- Connects to external storage: The WITH CONNECTION clause specifies a connection named <ProjectID>.<Location>.<ConnectionObjName>, which likely contains the necessary credentials and configuration to access the external data source (probably Cloud Storage in this case).
-- Defines data location and type: The OPTIONS clause provides details about the external data:
-- object_metadata="DIRECTORY" indicates that the data is organized in directories.
-- uris = ['gs://<BucketName>/*'] specifies the location of the data in a Cloud Storage bucket includes all files within that bucket using the wildcard *.
-- metadata_cache_mode="MANUAL" sets the metadata caching to manual, meaning BigQuery won't automatically refresh the metadata (information about the data).
CREATE OR REPLACE EXTERNAL TABLE 
  `<ProjectID>.<DatasetName>.<TableName>` 
WITH CONNECTION `<ProjectID>.<Location>.<ConnectionObjName>` OPTIONS ( 
    object_metadata="DIRECTORY", 
    uris = ['gs://<BucketName>/*' ], 
    metadata_cache_mode="MANUAL");

-- Refresh metadata manually (better for demo else AUTO is minimum 30 minutes)
CALL BQ.REFRESH_EXTERNAL_METADATA_CACHE("<ProjectID>.<DatasetName>.<TableName>");


-- Create a connection object to use in the BigQuery remote function creation - Follow this article: 
-- https://cloud.google.com/bigquery/docs/remote-functions#create_a_connection

-- Creates a remote function: This code defines a new function called <FunctionName> within the <ProjectID>.<DatasetName> dataset. The REMOTE keyword indicates that this function executes code outside of BigQuery. FYI article here: https://cloud.google.com/bigquery/docs/remote-functions
-- Specifies connection: WITH CONNECTION clause specifies that the function uses a pre-defined connection named <ProjectID>.<Location>.<ConnectionObj> (eg.: project-362608.us.simple_remote_function). This connection likely holds the necessary details to connect to the external service.
-- Sets the endpoint: The OPTIONS (endpoint = ...) clause defines the URL of the external service where the function's code is actually executed. In this case, it's a Cloud Function at the provided URL.
-- Handles inputs and outputs: The function takes two arguments (http_uri and prompt both as STRING) and is expected to return a string value.
-- (Optional) Batching: The commented-out max_batching_rows option suggests the function can potentially handle batched requests, but it's currently disabled. This might be useful for processing multiple rows of data efficiently.
CREATE OR REPLACE FUNCTION
	`<ProjectID>.<DatasetName>.<FunctionName>`(http_uri STRING, prompt STRING) RETURNS string
REMOTE WITH CONNECTION `<ProjectID>.<Location>.<ConnectionObjName>`
-- OPTIONS (endpoint = 'https://<CloudFunction_Endpoint>', max_batching_rows = 10);
OPTIONS (endpoint = 'https://<CloudFunction_Endpoint>');

-- Generates text with a pre-trained model: This code uses the ML.GENERATE_TEXT function in BigQuery to generate text using a pre-trained language model. The model is specified as testfab-362608.gemini_demo_fab.testmodel.
-- Applies the model to a BigLake table: The TABLE clause indicates that the model will be applied to data stored in a BigLake table called testfab-362608.gemini_demo_fab.shoes_catalog_biglake_table. This table likely contains information about shoes, possibly including images.
-- Configures generation parameters: The STRUCT clause defines parameters for text generation:
--   0 AS temperature sets the temperature parameter to 0, which encourages the model to produce more deterministic and focused output.
--   "<YourPrompt>" AS PROMPT provides the prompt that guides the model's text generation. In this case, the model is asked to determine the direction the toe of the shoe is pointing in an image.
--   TRUE AS FLATTEN_JSON_OUTPUT specifies that the output should be flattened into a simple string format.
-- Selects output fields: The SELECT statement retrieves three fields from the output of ML.GENERATE_TEXT:
--   uri: The URI of the data processed by the model (likely an image URI from the table).
--   ml_generate_text_llm_result: The actual text generated by the model in response to the prompt.
--   ml_generate_text_status: The status of the text generation process (e.g., success or failure).
-- Limits the output: The LIMIT 10 clause restricts the output to the first 10 rows, which is useful for testing or previewing the results.
SELECT
  uri,
  ml_generate_text_llm_result,
  ml_generate_text_status
FROM
  ML.GENERATE_TEXT( MODEL `<ProjectID>.<DatasetName>.<ModelName>`,
    TABLE `<ProjectID>.<DatasetName>.<TableName>`,
    STRUCT( 0 AS temperature,
      '<YourPrompt>' AS PROMPT,
      TRUE AS FLATTEN_JSON_OUTPUT))
limit 10
